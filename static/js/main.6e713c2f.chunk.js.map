{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","containers/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","phone","onClick","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","props","children","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"gLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qCCDSC,EAfF,SAAC,GAAwC,EAAtCC,GAAuC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACvC,OACC,yBAAKC,UAAU,sDAAuDD,QAASA,GAC9E,yBAAKE,IAAI,YAAYC,IAAG,+BAA0BN,EAA1B,mBAExB,6BACC,4BAAKA,GACL,2BAAIC,GACJ,2BAAIC,MC0COK,EA9CE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OAEnB,OAAQ,6BAEJA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OAAO,kBAAC,EAAD,CAAMP,UAAU,KAAKL,GAAIW,EAAKX,GAAIC,KAAMU,EAAKV,KAAMC,MAAOS,EAAKT,MAAOC,MAAOQ,EAAKR,aCKhFU,EAdG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,aACpB,OACC,yBAAKT,UAAU,UACd,2BACCA,UAAU,sCACVU,KAAK,SACLC,YAAY,oBAEZC,SAAUH,MCeCI,G,wDArBd,aAAc,IAAD,8BACZ,gBACKC,MAAM,CACVC,UAAU,GAHC,E,8DAOKC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACN,8DAGDG,KAAKE,MAAMC,a,GAlBQC,cCkDbC,E,kDA5Cd,aAAc,IAAD,8BAEZ,gBASDC,eAAiB,SAACC,GACjB,EAAKN,SAAS,CAACO,YAAaD,EAAME,OAAOC,SARzC,EAAKd,MAAQ,CACZV,OAAQ,GACRsB,YAAa,IANF,E,gEAgBO,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GACL,OAAOA,EAASC,UACdF,MAAK,SAAAG,GACP,EAAKd,SAAS,CAAEf,OAAQ6B,S,+BAKjB,IAAD,OAEDC,EAAiBhB,KAAKJ,MAAMV,OAAO+B,QAAO,SAAAC,GAC/C,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS,EAAKxB,MAAMY,YAAYW,kBAGjE,OACC,6BACC,wBAAIrC,UAAU,WAAd,6BACA,kBAAC,EAAD,CAAWS,aAAcS,KAAKM,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUxB,UAAU,KAAKI,OAAQ8B,U,GAvCrBZ,aCGlBiB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,6BACE,kBAAC,EAAD,QAGHC,SAASC,eAAe,SNoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLkC,QAAQlC,MAAMA,EAAMmC,a","file":"static/js/main.6e713c2f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({ id, name, email, phone, onClick }) => {\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow pw2 shadow-5'  onClick={onClick}>\r\n\t\t\t<img alt='robot_one' src={`https://robohash.org/${name}?size=200x200`} />\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t\t<p>{phone}</p>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport 'tachyons';\r\n\r\n\r\n\r\nconst CardList = ({ robots }) =>{\r\n\r\n\treturn(\t<div>\r\n\t\t\t\t{\r\n\t\t\t\t\trobots.map((user,i)=>{\r\n\t\t\t\t\t\treturn <Card className='tc' id={user.id} name={user.name} email={user.email} phone={user.phone} />\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t);\r\n}\r\n\r\n// var CardList = createReactClass({\r\n\r\n// \tgetInitialState: function(){\r\n// \t\treturn {\r\n// \t\t\tactiveUser: {}\r\n// \t\t};\r\n// \t},\r\n\r\n// \tsaveActiveUser: function(user){\r\n// \t\tthis.setState({activeUser: user})\r\n// \t\tconsole.log(\"activeUser is : \", this.state.activeUser.id)\r\n// \t},\r\n\r\n// \trender: function() {\r\n// \t\treturn(\t\r\n// \t\t\t\t<div>\r\n// \t\t\t\t\t{<Current id='mov' currentState={this.state.activeUser} />}\r\n\t\t\t\t\t\r\n// \t\t\t\t\t<div className='tc ' >\r\n// \t\t\t\t\t<hr/>\r\n// \t\t\t\t\t{\r\n// \t\t\t\t\t\trobots.map((user,i)=>{\r\n// \t\t\t\t\t\t\treturn <Card keys={i} id={user.id} name={user.name} email={user.email} phone={user.phone} onClick={ (user)=> {this.saveActiveUser(robots[i])}} />\r\n// \t\t\t\t\t\t})\r\n// \t\t\t\t\t}\r\n// \t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n// \t\t\t\t</div>\r\n\t\t\t\t\r\n// \t\t);\r\n// \t}\r\n// })\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange}) => {\r\n\treturn(\r\n\t\t<div className='pa2 tc'>\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue tc' \r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search for robots'\r\n\t\t\t\t// value={searchField} \r\n\t\t\t\tonChange={searchChange} />\r\n\t\t</div>\r\n\t\t);\r\n\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state={\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Ooooops. Something went Wrong!</h1>\r\n\t\t}\r\n\r\n\t\treturn this.props.children\r\n\t}\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList.js';\r\nimport SearchBox from '../components/SearchBox.js';\r\nimport './App.css'\r\nimport ErrorBoundary from './ErrorBoundary';\r\n\r\nclass App extends Component {\r\n\r\n\tconstructor(){\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchField: ''\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchField: event.target.value})\r\n\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=>{\r\n\t\t\treturn response.json();\r\n\t\t}).then(users=>{\r\n\t\t\tthis.setState({ robots: users})\r\n\t\t})\r\n\r\n\t}\r\n\r\n\trender(){\r\n\r\n\t\tconst filteredRobots = this.state.robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n\t\t})\r\n\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<h1 className='tc f1 g' >the RoboFriends-Community</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CardList className='tc' robots={filteredRobots} />\t\t\t\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t</div>\r\n\t\t\t);\t\t\r\n\t}\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App.js'\nimport './index.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<div>  \t\n   \t\t<App  />\n \t</div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}